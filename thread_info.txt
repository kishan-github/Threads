Threads :-

Reference - https://computing.llnl.gov/tutorials/pthreads/

1. It is a light weight process. Threads work within a process i.e, process provides resources to the thread.
2. Threads have their own :-
		- Program Counter ( PC ).
		- Stack space.
		- Register set.
		
3. Threads are not independent of each other. So they share :
		- Code section.
		- Data section ( Global and static variables).
		- OS resouces like files and signals.
		
Thread functions :-

1. pthread_create(&thread_id, NULL, routine, (void *)arg);

- On successful creation of thread, pthread_create returns 0 and the thread id of newly created thread will be in thread_id variable.
- 2nd argument is a structure of attributes that can be passed if needed.
- routine is the function that needs to be invoked when thread is created.
- arg variable is used to store the arguments that we want to pass to the routine function.

2. pthread_exit(void *ptr);

- Terminates the execution of the calling thread and makes ptr available to any succcessfull join.

3. pthread_t pthread_self(void);

- Returns the thread id of the calling thread.

4. int pthread_join(pthread_t thread, void **value_ptr);

- Suspends execution of calling thread until target thread terminates.
- value_ptr will hold the value passed by pthread_exit.
- Returns 0 on successful.

5. int pthread_detach(pthread_t thread);

- Indicates that the storage for thread can be reclaimed when thread is terminated. If thread is not terminated, pthread_detach shall not cause it to
terminate.


IMPORTANT POINTS :-

Terminating Threads & pthread_exit():

1. There are several ways in which a thread may be terminated:
	- The thread returns normally from its starting routine. Its work is done.
	- The thread makes a call to the pthread_exit subroutine - whether its work is done or not.
	- The thread is canceled by another thread via the pthread_cancel routine.
	- The entire process is terminated due to making a call to either the exec() or exit()
	- If main() finishes first, without calling pthread_exit explicitly itself.
	
2. The pthread_exit() routine allows the programmer to specify an optional termination status parameter. This optional parameter is typically returned to threads "joining" the terminated thread (covered later).
	- Cleanup: the pthread_exit() routine does not close files; any files opened inside the thread will remain open after the thread is terminated.

Discussion on calling pthread_exit() from main():
	- There is a definite problem if main() finishes before the threads it spawned if you don't call pthread_exit() explicitly. All of the threads it created will terminate because main() is done and no longer exists to support the threads.
	  By having main() explicitly call pthread_exit() as the last thing it does, main() will block and be kept alive to support the threads it created until they are done.


- The pthread_join() or pthread_detach() function should eventually be called for every thread that is created with the detachstate attribute set to 
PTHREAD_CREATE_JOINABLE so that storage associated with the thread may be reclaimed.
